{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16309,"status":"ok","timestamp":1712279233008,"user":{"displayName":"Matthew Farah","userId":"09192718233268265052"},"user_tz":240},"id":"erslDVb8yKSd","outputId":"63243eb2-73e2-4f97-b285-b3b509925ce1"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\", force_remount= True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10787,"status":"ok","timestamp":1712279243794,"user":{"displayName":"Matthew Farah","userId":"09192718233268265052"},"user_tz":240},"id":"oq2OLd8IyO6D","outputId":"9eb0752f-8d1c-4ab6-b519-c4d5b1cad03e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting endaq\n","  Downloading endaq-1.5.2-py3-none-any.whl (112 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.6/112.6 kB\u001b[0m \u001b[31m1.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting ebmlite>=3.2.0 (from endaq)\n","  Downloading ebmlite-3.3.1-py3-none-any.whl (92 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m92.2/92.2 kB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting idelib>=3.2.3 (from endaq)\n","  Downloading idelib-3.2.9-py3-none-any.whl (95 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.9/95.9 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from endaq) (3.1.3)\n","Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.10/dist-packages (from endaq) (1.25.2)\n","Requirement already satisfied: pandas>=1.3 in /usr/local/lib/python3.10/dist-packages (from endaq) (2.0.3)\n","Requirement already satisfied: plotly>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from endaq) (5.15.0)\n","Collecting pynmeagps (from endaq)\n","  Downloading pynmeagps-1.0.35-py3-none-any.whl (35 kB)\n","Collecting python-dotenv>=0.18.0 (from endaq)\n","  Downloading python_dotenv-1.0.1-py3-none-any.whl (19 kB)\n","Requirement already satisfied: requests>=2.25.1 in /usr/local/lib/python3.10/dist-packages (from endaq) (2.31.0)\n","Requirement already satisfied: scipy>=1.7.1 in /usr/local/lib/python3.10/dist-packages (from endaq) (1.11.4)\n","Collecting pint>=0.18 (from endaq)\n","  Downloading Pint-0.23-py3-none-any.whl (305 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m305.0/305.0 kB\u001b[0m \u001b[31m5.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3->endaq) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3->endaq) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3->endaq) (2024.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from pint>=0.18->endaq) (4.10.0)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly>=5.3.1->endaq) (8.2.3)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly>=5.3.1->endaq) (24.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.1->endaq) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.1->endaq) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.1->endaq) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.25.1->endaq) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->endaq) (2.1.5)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.3->endaq) (1.16.0)\n","Installing collected packages: ebmlite, python-dotenv, pynmeagps, pint, idelib, endaq\n","Successfully installed ebmlite-3.3.1 endaq-1.5.2 idelib-3.2.9 pint-0.23 pynmeagps-1.0.35 python-dotenv-1.0.1\n"]}],"source":["!pip install endaq"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Awv9isEyQQg"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import scipy as sp\n","import endaq\n","import math\n","import itertools as it\n","import operator\n","from scipy.signal import butter, filtfilt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-0HJT2jdyV-e"},"outputs":[],"source":["#utils\n","\n","def load_data(path, names = None, skip = 1):\n","  return (pd.read_csv(path))\n","                      #header = None,\n","                      #names = names,\n","                      #skiprows = skip))\n","\n","def mag(df):\n","  return(np.sqrt(df[\"AccX(g)\"] **2  + df[\"AccY(g)\"] **2  + df[\"AccZ(g)\"] ** 2))\n","\n","\n","def ft(x):\n","  coeff = np.fft.fft(x)\n","  return [np.real(coeff), np.imag(coeff), coeff]\n","\n","\n","## -- used if data is imported as strings --\n","def filter_str(val):\n","  return(isinstance(val, str))\n","\n","\n","def remove_str(df):\n","  return(df[~df.applymap(filter_str)])\n","\n","## --\n","\n","## Takes in the normalized PSD signal, finds peaks,\n","#locates frequencies associated with those peaks,\n","#returns the average of those peaks.\n","# average dominant frequency\n","\n","def peaks(freq_arr, norm_array, h = 0.8, prom = 0.4):\n","  pks, _ = sp.signal.find_peaks(norm_array, height = h, prominence = prom) #returns indices of peaks\n","  freq_pks = freq_arr[pks] #contains frequencies associated with the peaks\n","\n","  return np.mean(freq_pks)\n","\n","def extract_time(data_frame):\n","  time = data_frame[\"time\"]\n","  section = [time[i].split(\" \")[1] for i in range(len(time))]\n","  sec = np.array([int(i.split(\":\")[-2]) for i in section])\n","  m_sec = np.array ([int(i.split(\":\")[-1]) for i in section])\n","  sec[1:] = sec[1:]-sec[:-1]\n","  sec[0] = 0\n","  m_sec[1:] = m_sec[1:]-m_sec[:-1]\n","  m_sec[0] = 0\n","  p = sec + 0.001*m_sec\n","  return list(it.accumulate(p, operator.add))\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uB9Bd0OHyX8P"},"outputs":[],"source":["#Matt Comb Data\n","df_M_amp_comb = load_data(\"/content/drive/MyDrive/DT20/Spring 24/Prototyping/PASS/Data Collection/Cam Data/03 26 2024 cam/cam_11V_lowamp_10osc (1).csv\")\n","t= extract_time(df_M_amp_comb)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"GG_g9ox2yb3I"},"outputs":[],"source":["def butter_highpass(cutoff, fs, order=5):\n","    nyquist = 0.5 * fs\n","    normal_cutoff = cutoff / nyquist\n","    b, a = butter(order, normal_cutoff, btype='high', analog=False)\n","    return b, a\n","\n","# Function to apply the high-pass filter to accelerometer data\n","def highpass_filter(data, cutoff, fs, order=5):\n","    b, a = butter_highpass(cutoff, fs, order=order)\n","    filtered_data = filtfilt(b, a, data)\n","    return filtered_data\n","\n","# Example usage\n","# Assuming your DataFrame 'df' has columns 'x_accel', 'y_accel', 'z_accel' for accelerometer data\n","# and 'sampling_freq' contains the sampling frequency\n","cutoff_frequency = 1.0  # Example cutoff frequency in Hz\n","order = 5  # Example filter order\n","\n","# Apply the filter to each axis\n","for axis in ['AccX(g)', 'AccY(g)', 'AccZ(g)']:\n","    df_M_amp_comb[axis + '_filtered'] = highpass_filter(df[axis], cutoff_frequency, df['sampling_freq'], order)\n","\n","# Now df contains additional columns with filtered accelerometer data for each axis"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}